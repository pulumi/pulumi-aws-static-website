// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package awsstaticwebsite

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-aws/sdk/v5/go/aws/s3"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type PublicBucketPolicy struct {
	pulumi.ResourceState

	OwnershipControls s3.BucketOwnershipControlsOutput `pulumi:"ownershipControls"`
	PublicAccessBlock s3.BucketPublicAccessBlockOutput `pulumi:"publicAccessBlock"`
}

// NewPublicBucketPolicy registers a new resource with the given unique name, arguments, and options.
func NewPublicBucketPolicy(ctx *pulumi.Context,
	name string, args *PublicBucketPolicyArgs, opts ...pulumi.ResourceOption) (*PublicBucketPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Bucket == nil {
		return nil, errors.New("invalid value for required argument 'Bucket'")
	}
	var resource PublicBucketPolicy
	err := ctx.RegisterRemoteComponentResource("aws-static-website:index:PublicBucketPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type publicBucketPolicyArgs struct {
	// The bucket to apply the public policy to.
	Bucket *s3.Bucket `pulumi:"bucket"`
}

// The set of arguments for constructing a PublicBucketPolicy resource.
type PublicBucketPolicyArgs struct {
	// The bucket to apply the public policy to.
	Bucket s3.BucketInput
}

func (PublicBucketPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*publicBucketPolicyArgs)(nil)).Elem()
}

type PublicBucketPolicyInput interface {
	pulumi.Input

	ToPublicBucketPolicyOutput() PublicBucketPolicyOutput
	ToPublicBucketPolicyOutputWithContext(ctx context.Context) PublicBucketPolicyOutput
}

func (*PublicBucketPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicBucketPolicy)(nil)).Elem()
}

func (i *PublicBucketPolicy) ToPublicBucketPolicyOutput() PublicBucketPolicyOutput {
	return i.ToPublicBucketPolicyOutputWithContext(context.Background())
}

func (i *PublicBucketPolicy) ToPublicBucketPolicyOutputWithContext(ctx context.Context) PublicBucketPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicBucketPolicyOutput)
}

// PublicBucketPolicyArrayInput is an input type that accepts PublicBucketPolicyArray and PublicBucketPolicyArrayOutput values.
// You can construct a concrete instance of `PublicBucketPolicyArrayInput` via:
//
//	PublicBucketPolicyArray{ PublicBucketPolicyArgs{...} }
type PublicBucketPolicyArrayInput interface {
	pulumi.Input

	ToPublicBucketPolicyArrayOutput() PublicBucketPolicyArrayOutput
	ToPublicBucketPolicyArrayOutputWithContext(context.Context) PublicBucketPolicyArrayOutput
}

type PublicBucketPolicyArray []PublicBucketPolicyInput

func (PublicBucketPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicBucketPolicy)(nil)).Elem()
}

func (i PublicBucketPolicyArray) ToPublicBucketPolicyArrayOutput() PublicBucketPolicyArrayOutput {
	return i.ToPublicBucketPolicyArrayOutputWithContext(context.Background())
}

func (i PublicBucketPolicyArray) ToPublicBucketPolicyArrayOutputWithContext(ctx context.Context) PublicBucketPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicBucketPolicyArrayOutput)
}

// PublicBucketPolicyMapInput is an input type that accepts PublicBucketPolicyMap and PublicBucketPolicyMapOutput values.
// You can construct a concrete instance of `PublicBucketPolicyMapInput` via:
//
//	PublicBucketPolicyMap{ "key": PublicBucketPolicyArgs{...} }
type PublicBucketPolicyMapInput interface {
	pulumi.Input

	ToPublicBucketPolicyMapOutput() PublicBucketPolicyMapOutput
	ToPublicBucketPolicyMapOutputWithContext(context.Context) PublicBucketPolicyMapOutput
}

type PublicBucketPolicyMap map[string]PublicBucketPolicyInput

func (PublicBucketPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicBucketPolicy)(nil)).Elem()
}

func (i PublicBucketPolicyMap) ToPublicBucketPolicyMapOutput() PublicBucketPolicyMapOutput {
	return i.ToPublicBucketPolicyMapOutputWithContext(context.Background())
}

func (i PublicBucketPolicyMap) ToPublicBucketPolicyMapOutputWithContext(ctx context.Context) PublicBucketPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PublicBucketPolicyMapOutput)
}

type PublicBucketPolicyOutput struct{ *pulumi.OutputState }

func (PublicBucketPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PublicBucketPolicy)(nil)).Elem()
}

func (o PublicBucketPolicyOutput) ToPublicBucketPolicyOutput() PublicBucketPolicyOutput {
	return o
}

func (o PublicBucketPolicyOutput) ToPublicBucketPolicyOutputWithContext(ctx context.Context) PublicBucketPolicyOutput {
	return o
}

func (o PublicBucketPolicyOutput) OwnershipControls() s3.BucketOwnershipControlsOutput {
	return o.ApplyT(func(v *PublicBucketPolicy) s3.BucketOwnershipControlsOutput { return v.OwnershipControls }).(s3.BucketOwnershipControlsOutput)
}

func (o PublicBucketPolicyOutput) PublicAccessBlock() s3.BucketPublicAccessBlockOutput {
	return o.ApplyT(func(v *PublicBucketPolicy) s3.BucketPublicAccessBlockOutput { return v.PublicAccessBlock }).(s3.BucketPublicAccessBlockOutput)
}

type PublicBucketPolicyArrayOutput struct{ *pulumi.OutputState }

func (PublicBucketPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PublicBucketPolicy)(nil)).Elem()
}

func (o PublicBucketPolicyArrayOutput) ToPublicBucketPolicyArrayOutput() PublicBucketPolicyArrayOutput {
	return o
}

func (o PublicBucketPolicyArrayOutput) ToPublicBucketPolicyArrayOutputWithContext(ctx context.Context) PublicBucketPolicyArrayOutput {
	return o
}

func (o PublicBucketPolicyArrayOutput) Index(i pulumi.IntInput) PublicBucketPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PublicBucketPolicy {
		return vs[0].([]*PublicBucketPolicy)[vs[1].(int)]
	}).(PublicBucketPolicyOutput)
}

type PublicBucketPolicyMapOutput struct{ *pulumi.OutputState }

func (PublicBucketPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PublicBucketPolicy)(nil)).Elem()
}

func (o PublicBucketPolicyMapOutput) ToPublicBucketPolicyMapOutput() PublicBucketPolicyMapOutput {
	return o
}

func (o PublicBucketPolicyMapOutput) ToPublicBucketPolicyMapOutputWithContext(ctx context.Context) PublicBucketPolicyMapOutput {
	return o
}

func (o PublicBucketPolicyMapOutput) MapIndex(k pulumi.StringInput) PublicBucketPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PublicBucketPolicy {
		return vs[0].(map[string]*PublicBucketPolicy)[vs[1].(string)]
	}).(PublicBucketPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PublicBucketPolicyInput)(nil)).Elem(), &PublicBucketPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicBucketPolicyArrayInput)(nil)).Elem(), PublicBucketPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PublicBucketPolicyMapInput)(nil)).Elem(), PublicBucketPolicyMap{})
	pulumi.RegisterOutputType(PublicBucketPolicyOutput{})
	pulumi.RegisterOutputType(PublicBucketPolicyArrayOutput{})
	pulumi.RegisterOutputType(PublicBucketPolicyMapOutput{})
}
