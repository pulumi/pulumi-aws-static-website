// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AwsStaticWebsite
{
    [AwsStaticWebsiteResourceType("aws-static-website:index:Website")]
    public partial class Website : global::Pulumi.ComponentResource
    {
        /// <summary>
        /// The name of the s3 bucket containing the website contents.
        /// </summary>
        [Output("bucketName")]
        public Output<string> BucketName { get; private set; } = null!;

        /// <summary>
        /// The website URL for the s3 bucket.
        /// </summary>
        [Output("bucketWebsiteURL")]
        public Output<string> BucketWebsiteURL { get; private set; } = null!;

        /// <summary>
        /// The domain name for the CDN.
        /// </summary>
        [Output("cdnDomainName")]
        public Output<string?> CdnDomainName { get; private set; } = null!;

        /// <summary>
        /// The URL for the CDN
        /// </summary>
        [Output("cdnURL")]
        public Output<string?> CdnURL { get; private set; } = null!;

        /// <summary>
        /// The name of the s3 bucket containing the access logs.
        /// </summary>
        [Output("logsBucketName")]
        public Output<string?> LogsBucketName { get; private set; } = null!;

        /// <summary>
        /// The URL to access the website
        /// </summary>
        [Output("websiteURL")]
        public Output<string> WebsiteURL { get; private set; } = null!;


        /// <summary>
        /// Create a Website resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Website(string name, WebsiteArgs args, ComponentResourceOptions? options = null)
            : base("aws-static-website:index:Website", name, args ?? new WebsiteArgs(), MakeResourceOptions(options, ""), remote: true)
        {
        }

        private static ComponentResourceOptions MakeResourceOptions(ComponentResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new ComponentResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = ComponentResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
    }

    public sealed class WebsiteArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Enable a cache control header to be attached to every request from an Cloudfront Function.
        /// </summary>
        [Input("addWebsiteVersionHeader")]
        public Input<bool>? AddWebsiteVersionHeader { get; set; }

        /// <summary>
        /// Provision a new bucket on each deployment.
        /// </summary>
        [Input("atomicDeployments")]
        public Input<bool>? AtomicDeployments { get; set; }

        /// <summary>
        /// TTL in seconds for cached objects. 
        /// </summary>
        [Input("cacheTTL")]
        public Input<double>? CacheTTL { get; set; }

        /// <summary>
        /// Optional arguments used to configure the CDN.
        /// </summary>
        [Input("cdnArgs")]
        public Input<Inputs.CDNArgsArgs>? CdnArgs { get; set; }

        /// <summary>
        /// The ARN of the ACM certificate to use for serving HTTPS. If one is not provided, a certificate will be created during the provisioning process.
        /// </summary>
        [Input("certificateARN")]
        public Input<string>? CertificateARN { get; set; }

        /// <summary>
        /// default 403 page
        /// </summary>
        [Input("error403")]
        public Input<string>? Error403 { get; set; }

        /// <summary>
        /// default 404 page
        /// </summary>
        [Input("error404")]
        public Input<string>? Error404 { get; set; }

        /// <summary>
        /// The default document for the site. Defaults to index.html
        /// </summary>
        [Input("indexHTML")]
        public Input<string>? IndexHTML { get; set; }

        /// <summary>
        /// The price class to use for the CloudFront configuration. Defaults to 100 if not specified. Valid values are `all`, `100`, and `200`
        /// </summary>
        [Input("priceClass")]
        public Input<string>? PriceClass { get; set; }

        /// <summary>
        /// The root directory containing the website's contents.
        /// </summary>
        [Input("sitePath", required: true)]
        public Input<string> SitePath { get; set; } = null!;

        /// <summary>
        /// An optional subdomain that can be used to serve the content. This can typically be used to provision a www alias or if a deeply nested subdomain is needed (e.g. foo.bar.baz.com).
        /// </summary>
        [Input("subdomain")]
        public Input<string>? Subdomain { get; set; }

        /// <summary>
        /// The domain used to serve the content. A Route53 hosted zone must exist for this domain.
        /// </summary>
        [Input("targetDomain")]
        public Input<string>? TargetDomain { get; set; }

        /// <summary>
        /// Provision CloudFront CDN to serve content.
        /// </summary>
        [Input("withCDN")]
        public Input<bool>? WithCDN { get; set; }

        /// <summary>
        /// Provision a bucket to hold access logs.
        /// </summary>
        [Input("withLogs")]
        public Input<bool>? WithLogs { get; set; }

        public WebsiteArgs()
        {
        }
        public static new WebsiteArgs Empty => new WebsiteArgs();
    }
}
