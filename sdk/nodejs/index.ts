// *** WARNING: this file was generated by Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PublicBucketPolicyArgs } from "./publicBucketPolicy";
export type PublicBucketPolicy = import("./publicBucketPolicy").PublicBucketPolicy;
export const PublicBucketPolicy: typeof import("./publicBucketPolicy").PublicBucketPolicy = null as any;
utilities.lazyLoad(exports, ["PublicBucketPolicy"], () => require("./publicBucketPolicy"));

export { WebsiteArgs } from "./website";
export type Website = import("./website").Website;
export const Website: typeof import("./website").Website = null as any;
utilities.lazyLoad(exports, ["Website"], () => require("./website"));


// Export sub-modules:
import * as types from "./types";

export {
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "aws-static-website:index:PublicBucketPolicy":
                return new PublicBucketPolicy(name, <any>undefined, { urn })
            case "aws-static-website:index:Website":
                return new Website(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws-static-website", "index", _module)
pulumi.runtime.registerResourcePackage("aws-static-website", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:aws-static-website") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
